{"name":"Dcron","tagline":"dillon's lightweight cron daemon","body":"DCRON - DILLON'S LIGHTWEIGHT CRON DAEMON\r\n========================================\r\n\r\nThis lightweight cron daemon aims to be simple and secure, with just enough\r\nfeatures to stay useful. It was written from scratch by Matt Dillon in 1994.\r\nIt's now developed and maintained by Jim Pryor.\r\n\r\nIn the author's opinion, having to combine a cron daemon with another daemon\r\nlike anacron makes for too much complexity. So the goal is a simple cron daemon\r\nthat can also take over the central functions of anacron.\r\n\r\nUnlike other fatter cron daemons, though, this cron doesn't even try to manage\r\nenvironment variables or act as a shell. All jobs are run with `/bin/sh` for\r\nconformity and portability. We don't try to use the user's preferred shell:\r\nthat breaks down for special users and even makes some of us normal users\r\nunhappy (for example, /bin/csh does not use a true O_APPEND mode and has\r\ndifficulty redirecting stdout and stderr both to different places!). You can,\r\nof course, run shell scripts in whatever language you like by making them\r\nexecutable with #!/bin/csh or whatever as the first line. If you don't like\r\nthe extra processes, just `exec` them.\r\n\r\nIf you need to set special environment variables, pass them as arguments to a\r\nscript.\r\n\r\nThe programs were written with an eye towards security, hopefully we haven't\r\nforgotton anything. The programs were also written with an eye towards nice,\r\nclean, algorithmically sound code. It's small, and the only fancy code is that\r\nwhich deals with child processes. We do not try to optimize with vfork() since\r\nit causes headaches and is rather pointless considering we're execing a shell\r\nmost of the time, and we pay close attention to leaving descriptors open in the\r\ncrond and close attention to preventing crond from running away.\r\n\r\n\r\nDOWNLOADING\r\n-----------\r\n\r\nThe project is hosted at: <http://www.jimpryor.net/linux/dcron.html>.\r\n\r\nThe latest version is 4.5, which can be downloaded here:\r\n<http://www.jimpryor.net/linux/releases/dcron-4.5.tar.gz>.\r\n\r\nA public git repo is available at: <http://repo.or.cz/w/dcron.git>.\r\n\r\n\r\nCOMPILING\r\n---------\r\n\r\nYou must use a compiler that understands prototypes, such as GCC.\r\n\r\n(1) The following compile-time defaults are configurable via\r\ncommand-line assignments on the `make` line (they're shown here with\r\ntheir default values):\r\n\r\n\tPREFIX=/usr/local         # where files will ultimately be installed\r\n\tSBINDIR = $(PREFIX)/sbin  # where crond will be installed\r\n\tBINDIR = $(PREFIX)/bin    # where crontab will be installed\r\n\tMANDIR = $(PREFIX)/share/man  # where manpages will be installed\r\n\tCRONTABS = /var/spool/cron/crontabs     # default dir for per-user crontabs\r\n\tCRONSTAMPS = /var/spool/cron/cronstamps # default dir\r\n\tSCRONTABS = /etc/cron.d   # default dir for system crontabs\r\n\r\n\tCRONTAB_GROUP = wheel     # who's allowed to edit their own crontabs?\r\n\tLOG_IDENT = crond         # syslog uses facility LOG_CRON and this identity\r\n\tTIMESTAMP_FMT = %b %e %H:%M:%S  # used if LC_TIME unset and logging to file\r\n\r\nA few additional compile-time settings are defined in defs.h. If you find yourself\r\nwanting to edit defs.h directly, try editing the DEFS line in the Makefile instead.\r\n\r\n(2) Run make with your desired settings. For example:\r\n\r\n\tmake PREFIX=/usr CRONTAB_GROUP=users\r\n\r\n(3) If you're using the git version, you might also want to `make man`,\r\nto be sure the manpages are updated. This requires \r\n[pandoc](http://johnmacfarlane.net/pandoc/).\r\n\r\n\r\nINSTALLING\r\n----------\r\n\r\n(4) `make install` installs the files underneath PREFIX (by default, /usr/local).\r\nIf you're packaging, you can supply a DESTDIR argument here:\r\n\r\n\tmake DESTDIR=/path/to/your/package/root install\r\n\r\nPermissions will be as follows:\r\n\r\n\t-rwx------  0 root   root    32232 Jan  6 18:58 /usr/local/sbin/crond\r\n\t-rwsr-x---  0 root   wheel   15288 Jan  6 18:58 /usr/local/bin/crontab\r\n\r\nOnly users belonging to crontab's group (here \"wheel\") will be able to use it.\r\nYou may want to create a special \"cron\" group and assign crontab to it:\r\n\r\n\tgroupadd cron\r\n\tchgrp cron /usr/local/bin/crontab\r\n\tchmod 4750 /usr/local/bin/crontab\r\n\r\n(If the group already exists, you can specify it by supplying CRONTAB_GROUP\r\nto the `make` or `make install` commands.)\r\n\r\nThen add users to group \"cron\" when you want them to be able to install\r\nor edit their own crontabs. The superuser is able to install crontabs for users\r\nwho don't have the privileges to edit their own.\r\n\r\nYou should schedule crond to run automatically from system startup, using\r\n/etc/rc.local or a similar mechanism. crond automatically detaches. By default\r\nit logs all events <= loglevel NOTICE to syslog.\r\n\r\nThe crontab files are normally located in /var/spool/cron/crontabs, and timestamps\r\nare normally in /var/spool/cron/cronstamps. These directories normally have permissions:\r\n\r\n\tdrwxr-xr-x  2 root   root     4096 Jan  6 18:50 /var/spool/cron\r\n\tdrwxr-xr-x  1 root   root        0 Jan  6 18:58 /var/spool/cron/crontabs\r\n\tdrwxr-xr-x  1 root   root        0 Jan  6 18:58 /var/spool/cron/cronstamps/\r\n\r\nHere is the superuser's crontab, created using `sudo crontab -e`:\r\n\r\n\t-rw-------  0 root   root      513 Jan  6 18:58 /var/spool/cron/root\r\n\r\nTESTING\r\n-------\r\n\r\nUse the crontab program to create a personal crontab with the following\r\ntwo lines:\r\n\r\n\t* * * * *  date >> /tmp/test\r\n\t* * * * *  date\r\n\r\nCheck the log output of crond to ensure the cron entries are being\r\nrun once a minute, check /tmp/test to ensure the date is being\r\nappended to it once a minute, and check your mail to ensure that crond\r\nis mailing you the date from the other entry once a minute.\r\n\r\nAfter you are through testing cron, delete the entries with `crontab -e`\r\nor `crontab -d`.\r\n\r\nEXTRAS\r\n------\r\n\r\nThe following are included in the \"extra\" folder. None of them are installed\r\nby `make install`:\r\n\r\ncrond.rc\r\n:\tThis is an example rc script to start and stop crond. It could be placed in\r\n/etc/rc.d or /etc/init.d in suitable systems.\r\n\r\ncrond.conf\r\n:\tThis contains user-modifiable settings for crond.rc. The sample crond.rc\r\nexpects to source this file from /etc/conf.d/crond.\r\n\r\nrun-cron\r\n:\tThis simple shell script is a bare-bones alternative to Debian's run-parts.\r\n\r\nroot.crontab\r\n:\tThis is an example crontab to install for the root user, or to install\r\nin /etc/cron.d. It runs any executable scripts located in the directories /etc/cron.hourly,\r\n/etc/cron.daily, /etc/cron.weekly, and /etc/cron.monthly at the appropriate times.\r\nThis example uses the run-cron script mentioned above, and relies on you to\r\ncreate the /etc/cron.* directories.\r\n\r\nprune-cronstamps\r\n:\tcrond never removes any files from your cronstamps directory. If usernames\r\nare abandoned, or cron job names are abandoned, unused files will accumulate\r\nthere. This simple cronjob will prune any cronstamp files older than three months.\r\nIt will run weekly if placed in /etc/cron.d.\r\n\r\ncrond.logrotate\r\n:\tThis is an example to place in /etc/logrotate.d. This config file assumes you\r\nrun crond using -L /var/log/crond.log. If you run crond using syslog instead (the default),\r\nyou may prefer to configure the rotation of all your syslog-generated logs in a\r\nsingle config file.\r\n\r\ncrontab.vim\r\n:\tThis makes vim handle backup files in way that doesn't interfere with crontab's security\r\nmodel.\r\n\r\n\r\nBUG REPORTS, SUBMISSIONS\r\n------------------------\r\n\r\nSend any bug reports and source code changes to Jim Pryor:\r\n<profjim@jimpryor.net>.\r\n\r\nWe aim to keep this program simple, secure, and bug-free, in preference to\r\nadding features. Those advanced features we have added recently (such as\r\n@noauto, FREQ= and AFTER= tags, advanced cron.update parsing) fit naturally\r\ninto the existing codebase.\r\n\r\nOur goal is also to make this program compilable in as near to a C89-strict a\r\nmanner as possible. Less-portable features we're aware of are described in the\r\ncomments to defs.h. We'll reduce these dependencies as feasible. Do let us know\r\nif any of them are an obstacle to using crond on your platform.\r\n\r\nChanges to defs.h, whether to override defaults or to accommodate your platform,\r\nshould be made by a combination of a -D option in the Makefile\r\nand an #ifdef for that option in defs.h. Don't rely on pre-definitions made\r\nby the C compiler.\r\n\r\nPrototypes for system functions should come from external include\r\nfiles and NOT from defs.h or any source file. If no prototype exists for a\r\nparticular function, contact your vendor to get an update for your includes.\r\n\r\nNote that the source code, especially in regard to changing the\r\neffective user, is Linux specific (SysVish). We welcome any changes\r\nin regard to making the mechanism work with other platforms.\r\n\r\n\r\nCREDITS\r\n-------\r\n\r\nWe use `concat`, a lightweight replacement for `asprintf`, in order to be more\r\nportable. This was written by Solar Designer and is in the public domain. See\r\n<http://www.openwall.com/popa3d/>.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}