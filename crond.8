.TH CROND 8 "6 Jan 2010"
.SH NAME
.PP
crond - cron daemon (Dillon's Cron Daemon)
.SH SYNOPSIS
.PP
\f[B]crond [-l loglevel] [-L [logfile]|-S] [-M mailscript] [-m mailto] [-d|-f|-b] [-s systemdir] [-c crondir] [-t timestamps]\f[]
.SH OPTIONS
.PP
\f[B]crond\f[] is a background daemon that parses individual
crontab files and executes commands on behalf of the users in
question.
.TP
.B -l loglevel
set logging level, default is <= notice = 5.
.RS
.PP
Valid level names are as described in logger.1 and syslog.3: alert,
crit, debug, emerg, err, error (deprecated synonym for err), info,
notice, panic (deprecated synonym for emerg), warning, warn
(deprecated synonym for warning).
.RE
.TP
.B -L [logfile]
log to specified file (if none supplied, uses /var/log/crond.log).
.RS
.RE
.TP
.B -S
use syslogd (default).
.RS
.RE
.TP
.B -M mailscript
receives any cron job output as stdin (default is
/usr/sbin/sendmail).
.RS
.RE
.TP
.B -m mailto
address to mail any cron output to (default is local user).
.RS
.RE
.TP
.B -d
turn on debugging.
This option sets the logging level to <= debug and causes
\f[B]crond\f[] to run in the foreground.
.RS
.RE
.TP
.B -f
run \f[B]crond\f[] in the foreground.
.RS
.RE
.TP
.B -b
run \f[B]crond\f[] in the background (default unless -d or -f is
specified).
.RS
.RE
.TP
.B -s systemdir
specify directory containing system-wide crontab files (default is
/etc/cron.d).
.RS
.RE
.TP
.B -c crondir
specify crontab spool directory (default is
/var/spool/cron/crontabs).
.RS
.RE
.TP
.B -t timestamps
specify directory containing cron timestamps for \@freq jobs
(default is /var/spool/cron/timestamps).
.RS
.RE
.SH DESCRIPTION
.PP
\f[B]crond\f[] is responsible for scanning the crontab files and
running their commands at the appropriate time.
The \f[B]crontab\f[] program communicates with \f[B]crond\f[]
through the \[lq]cron.update\[rq] file which resides in the
crontabs directory, usually /var/spool/cron/crontabs.
This is accomplished by appending the filename of the modified or
deleted crontab file to \[lq]cron.update\[rq] which \f[B]crond\f[]
then picks up to resynchronize or remove its internal
representation of the file.
.PP
Whenever the \[lq]cron.update\[rq] file is seen, \f[B]crond\f[]
also re-reads all of timestamp files from disk.
Normally these will just mirror \f[B]crond\f[]'s own internal
representations, but this mechanism could be used to externally
update the timestamps.
.PP
The \[lq]cron.update\[rq] file can also be used to instruct
\f[B]crond\f[] to schedule a named job.
Each line in this file should have the format:
.PP
\f[CR]
      user\ job1\ !job2
\f[]
.PP
to request that user's job1 should be scheduled (waiting first for
the successful completion of any jobs named in job1's AFTER=
argument), and job2 should also be scheduled (without waiting for
other jobs).
.PP
\f[B]crond\f[] has a number of built in limitations to reduce the
chance of it being ill-used.
Potentially infinite loops during parsing are dealt with via a
failsafe counter, and user crontabs are generally limited to 256
crontab entries.
Crontab lines may not be longer than 1024 characters, including the
newline.
.PP
Whenever \f[B]crond\f[] must run a job, it first creates a
daemon-owned temporary file O_EXCL and O_APPEND to store any
output, then fork()s and changes its user and group permissions to
match that of the user the job is being run for, then
\f[B]exec\f[]s \f[B]/bin/sh -c <command>\f[] to run the job.
The temporary file remains under the ownership of the daemon to
prevent the user from tampering with it.
Upon job completion, \f[B]crond\f[] verifies the secureness of the
mail file and, if it has been appended to, mails to the file to
user.
The \f[B]sendmail\f[] program (or custom mailscript, if supplied)
is run under the user's uid to prevent mail related security holes.
.PP
When the \f[B]crontab\f[] program allows a user to edit his
crontab, it copies the crontab to a user owned file before running
the user's prefered editor.
The suid \f[B]crontab\f[] keeps an open descriptor to the file
which it later uses to copy the file back, thereby ensuring the
user has not tampered with the file type.
Unlike \f[B]crontab\f[], the \f[B]crond\f[] program does not leave
an open descriptor to the file for the duration of the job's
execution as this might cause \f[B]crond\f[] to run out of
descriptors.
.PP
\f[B]crond\f[] always synchronizes to the top of the minute,
checking the current time against the list of possible jobs.
The list is stored such that the scan goes very quickly, and
\f[B]crond\f[] can deal with several thousand entries without
taking any noticable amount of cpu.
.SH AUTHORS
.PP
Matthew Dillon (dillon\@apollo.backplane.com)
.PD 0
.P
.PD
Jim
Pryor (profjim\@jimpryor.net)
