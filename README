
DCRON - DILLON'S LIGHTWEIGHT CRON DAEMON
========================================

This lightweight cron daemon aims to be simple and secure, with just enough
features to stay useful. It was written from scratch by Matt Dillon in 1994.
It's now developed and maintained by Jim Pryor.

In the author's opinion, having to combine a cron daemon with another daemon
like anacron makes for too much complexity. So the goal is a simple cron daemon
that can also take over the central functions of anacron.

Unlike other fatter cron daemons, though, this cron doesn't even try to manage
environment variables or act as a shell. All jobs are run with `/bin/sh` for
conformity and portability. We don't try to use the user's preferred shell:
that breaks down for special users and even makes some of us normal users
unhappy (for example, /bin/csh does not use a true O_APPEND mode and has
difficulty redirecting stdout and stderr both to different places!).  You can,
of course, run shell scripts in whatever language you like by making them
executable with #!/bin/csh or whatever as the first line.  If you don't like
the extra processes, just `exec` them.

If you need to set special environment variables, pass them as arguments to a
script.

The programs were written with an eye towards security, hopefully we haven't
forgotton anything.  The programs were also written with an eye towards nice,
clean, algorithmically sound code.  It's small, and the only fancy code is that
which deals with child processes.  We do not try to optimize with vfork() since
it causes headaches and is rather pointless considering we're execing a shell
most of the time, and we pay close attention to leaving descriptors open in the
crond and close attention to preventing crond from running away.


DOWNLOADING
-----------

The project is hosted at: <http://www.jimpryor.net/linux/dcron.html>.

The latest version is 4.3, which can be downloaded here:
<http://www.jimpryor.net/linux/releases/dcron-4.3.tar.gz>.

A public git repo is available at: <http://repo.or.cz/w/dcron.git>.


COMPILING
---------

You must use a compiler that understands prototypes, such as GCC.

Note that the source code, especially in regard to changing the
effective user, is Linux specific (SysVish).  I welcome any changes
in regard to making the mechanism work with other platforms.

(1) Edit the Makefile, adding -D overrides to defines in defs.h as
appropriate for your machine. Our goal is to including everything that
you might need to override in the Makefile. Let us know if you find
yourself needing to edit defs.h directly.

(2) You may need to edit the #include lines in defs.h for your
machine. We'd like these to work for as many systems as possible;
let us know if you need to make changes.

(3) `make`

(4) If you're using the git version, you might also want to `make man`,
to be sure the manpages are updated. This requires 
[pandoc](http://johnmacfarlane.net/pandoc/).


INSTALLING
----------

(5) `make install` installs the files underneath /usr/local. `make PREFIX=/usr
install` installs them underneath /usr instead.

Permissions will be as follows:

	-rwx------  0 root   root    32232 Jan  6 18:58 /usr/sbin/crond
	-rwsr-x---  0 root   wheel   15288 Jan  6 18:58 /usr/bin/crontab

Only users belonging to crontab's group (here "wheel") will be able to use it.
You may want to create a special "cron" group and assign `crontab` to it:

	groupadd cron
	chgrp cron /usr/bin/crontab
	chmod 4750 /usr/bin/crontab

Then add users to group "cron" when you want them to be able to install
or modify their crontabs. The superuser can install crontabs for users
who don't have the privileges to do it themselves.

You should schedule crond to run automatically from system startup, using
/etc/rc.local or a similar mechanism. crond automatically detaches. By default
it logs all events <= loglevel NOTICE to syslog.

The crontab files are normally located in /var/spool/cron/, and timestamps
are normally in /var/spool/cronstamps. These directories normally have permissions:

	drwxr-xr-x  0 root   wheel       0 Jan  6 18:58 var/spool/cron/
	drwxr-xr-x  0 root   wheel       0 Jan  6 18:58 var/spool/cronstamps/

Here is the superuser's crontab, created using `sudo crontab -e`:

	-rw-------  0 root   root      513 Jan  6 18:58 var/spool/cron/root


TESTING
-------

Use the crontab program to create a personal crontab with the following
two lines:

	* * * * *  date >> /tmp/test
	* * * * *  date

Check the log output of crond to ensure the cron entries are being
run once a minute, check /tmp/test to ensure the date is being
appended to it once a minute, and check your mail to ensure that crond
is mailing you the date from the other entry once a minute.

After you are through testing cron, delete the entries with `crontab -e`
or `crontab -d`.


BUG REPORTS, SUBMISSIONS
------------------------

Send any bug reports and source code changes to Jim Pryor:
<profjim@jimpryor.net>.

Our goal is to make this program compilable in as C89-strict a manner as
possible. Prototypes for system functions should come from external include
files and NOT from defs.h or any source file. If no prototype exists for a
particular function, contact your vendor to get an update for your includes.

At the moment, less-portable features we're aware of in the source are the
use of getopt, strsep, strptime, and [v]snprintf.

Changes to overridable defaults in defs.h should be made in the Makefile; you
may submit a Makefile for your platform.  Changes to the #include's in defs.h
should be made by a combination of an -D options in the Makefile and #ifdef's
for that option in defs.h, and not rely on pre-definitions made by the C
compiler.

Changes to source code to accomodate one platform or other should be made in
the same manner.

Our goal is also to keep this program simple, secure, and bug-free rather than
feature-full. We have recently added some advanced features (@noauto, FREQ= and
AFTER= tags, advanced cron.update parsing), but we did so only when they fit
naturally into the rest of the codebase.

CREDITS
-------

We use concat.c, a lightweight replacement for asprintf, in order to be more
portable. This was written by Solar Designer and is in the public domain. See
<http://www.openwall.com/popa3d/>.

