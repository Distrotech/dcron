From dan@hits.at Thu Jun 26 14:14:19 2003
Received: from earth.backplane.com (earth.backplane.com [216.240.41.17])
	by apollo.backplane.com (8.12.9/8.12.6) with ESMTP id h5QLEI0e005462
	for <dillon@apollo.backplane.com>; Thu, 26 Jun 2003 14:14:18 -0700 (PDT)
	(envelope-from dan@hits.at)
Received: from mail.hits.at (h2.net2-024.hebr.q5net.at [195.230.51.27])
	by earth.backplane.com (8.12.9/8.12.5) with ESMTP id h5QLDvd1087978
	for <dillon@backplane.com>; Thu, 26 Jun 2003 14:13:58 -0700 (PDT)
	(envelope-from dan@hits.at)
Received: from [192.168.0.99] (helo=hits.at)
	by mail.hits.at with asmtp (TLSv1:RC4-MD5:128)
	(Exim 4.10)
	id 19Ve41-00088M-00
	for dillon@backplane.com; Thu, 26 Jun 2003 23:13:53 +0200
Message-ID: <3EFB6252.7040404@hits.at>
Date: Thu, 26 Jun 2003 23:14:58 +0200
From: Daniel Himler <dan@hits.at>
User-Agent: Mozilla/5.0 (X11; U; Linux i686; de-AT; rv:1.3) Gecko/20030313
X-Accept-Language: de-at, de, en-us, en
MIME-Version: 1.0
To: dillon@backplane.com
Subject: Syslog patch for dcron V2.9
Content-Type: multipart/mixed;
 boundary="------------010504090408020903070901"
X-Spam-Score: -2.1 (--)
X-Scanner: exiscan for exim4 (http://duncanthrax.net/exiscan/) *19Ve41-00088M-00*qklkCDEofg2*

This is a multi-part message in MIME format.
--------------010504090408020903070901
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit

Hi Matt!

First of all sorry for my English, but I'm not a native speaker.
Secondly, if you get annoyed by people sending in patches, I hereby 
apologize. ;-)

I'm creating my own little Linux distro which is using dcron as its cron 
daemon.
When I noticed that dcron didn't have the ability to log using syslogd, 
I started to search for a workaround on the internet.

Attached you find two patches for dcron.
The first one (dcron-2.3.3-syslog.patch) is the original one I 
discovered during my search.
The second one (dcron-2.9-syslog.patch) I created for version 2.9, 
leaving out all changes I didn't understood.

I am not a C programmer in any way, so please don't blame me for any 
rubbish the patches might contain.

It works for me beautifully, so I thought It wouldn't hurt anybody if I 
send them to you.
Maybe they are of some use to you. If not... it was worth the try. ;-)

Best regards,
Daniel

--------------010504090408020903070901
Content-Type: text/plain;
 name="dcron-2.3.3-syslog.patch"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline;
 filename="dcron-2.3.3-syslog.patch"

diff -ur dcron-2.3.3.orig/CHANGES dcron-2.3.3/CHANGES
--- dcron-2.3.3.orig/CHANGES	1998-02-16 20:32:01.000000000 +0100
+++ dcron-2.3.3/CHANGES	2003-05-18 19:14:04.000000000 +0200
@@ -1,3 +1,15 @@
+20/03/00 - TEMHOTA <temnota@kmv.ru>
+	Adding SIGHUP signal handler. crond die when init send to it SIGHUP.
+	Rewrtited all loging code. Added logging through syslog and normal
+	logging to file. 
+
+	Technical details:
+	+ logging through syslog used facility LOG_CRON
+	+ log_err - now *always* write message to logger (if selected logging
+	  through syslog - message send as LOG_ERR).
+	+ log9 - sends message hrough syslog loglevel LOG_WARNING
+	+ for all other log levels - default syslog loglevel LOG_NOTICE
+
 02/16/98 - Jordan Mendelson (jordy@wserv.com)
 
 	Numerous people have reported a problem with logging. I'm sorry
diff -ur dcron-2.3.3.orig/Makefile dcron-2.3.3/Makefile
--- dcron-2.3.3.orig/Makefile	1997-09-05 21:42:44.000000000 +0200
+++ dcron-2.3.3/Makefile	2003-05-18 19:14:04.000000000 +0200
@@ -27,7 +27,7 @@
 	rm -f crond crontab
 
 cleano:
-	rm -f *.o dcron.tgz $(PROTOS)
+	rm -f *.o dcron.tgz $(PROTOS) *~
 
 install: crond crontab
 	install -o root -g root -m 0755 crond /usr/sbin
diff -ur dcron-2.3.3.orig/crontab.c dcron-2.3.3/crontab.c
--- dcron-2.3.3.orig/crontab.c	1997-08-31 09:30:40.000000000 +0200
+++ dcron-2.3.3/crontab.c	2003-05-18 19:14:04.000000000 +0200
@@ -15,6 +15,9 @@
 char  *CDir = CRONTABS;
 int   UserId;
 short LogLevel = 9;
+short DebugOpt = 0;
+short LoggerOpt = 0;
+char  *LogFile = LOG_FILE;
 
 void EditFile(const char *user, const char *file);
 int GetReplaceStream(const char *user, const char *file);
@@ -136,7 +139,7 @@
      */
 
     if (chdir(CDir) < 0) {
-        fprintf(stderr, "cannot change diir to %s: %s\n", CDir, strerror(errno));
+        fprintf(stderr, "cannot change dir to %s: %s\n", CDir, strerror(errno));
         exit(1);
     }
 
diff -ur dcron-2.3.3.orig/defs.h dcron-2.3.3/defs.h
--- dcron-2.3.3.orig/defs.h	1997-09-05 21:44:32.000000000 +0200
+++ dcron-2.3.3/defs.h	2003-05-18 19:14:04.000000000 +0200
@@ -17,6 +17,9 @@
 #include <pwd.h>
 #include <unistd.h>
 #include <grp.h>
+#include <syslog.h>
+#include <signal.h>
+#include <getopt.h>
 #include <sys/ioctl.h>
 #include <sys/wait.h>
 #include <sys/stat.h>
@@ -29,7 +32,10 @@
 #define CRONTABS	"/var/spool/cron/crontabs"
 #endif
 #ifndef TMPDIR
-#define TMPDIR		"/tmp"
+#define TMPDIR		"/var/spool/cron"
+#endif
+#ifndef LOG_FILE
+#define LOG_FILE	"/var/log/cron"
 #endif
 #ifndef OPEN_MAX
 #define OPEN_MAX	256
diff -ur dcron-2.3.3.orig/job.c dcron-2.3.3/job.c
--- dcron-2.3.3.orig/job.c	1997-08-31 09:33:58.000000000 +0200
+++ dcron-2.3.3/job.c	2003-05-18 19:14:04.000000000 +0200
@@ -16,7 +16,7 @@
 {
     char mailFile[128];
     int mailFd;
-
+     
     line->cl_Pid = 0;
     line->cl_MailFlag = 0;
 
@@ -57,14 +57,6 @@
 	    log(5, "Child Running %s\n", line->cl_Shell);
 
 	/*
-	 * Setup close-on-exec descriptor in case exec fails
-	 */
-
-	dup2(2, 8);
-	fcntl(8, F_SETFD, 1);
-	fclose(stderr);
-
-	/*
 	 * stdin is already /dev/null, setup stdout and stderr
 	 */
 
@@ -73,13 +65,13 @@
 	    dup2(mailFd, 2);
 	    close(mailFd);
 	} else {
-	    logfd(8, "unable to create mail file user %s file %s, output to /dev/null\n",
+	    log_err("unable to create mail file user %s file %s, output to /dev/null\n",
 	        file->cf_User,
 	        mailFile
 	    );
 	}
 	execl("/bin/sh", "/bin/sh", "-c", line->cl_Shell, NULL, NULL);
-	logfd(8, "unable to exec, user %s cmd /bin/sh -c %s\n", 
+	log_err("unable to exec, user %s cmd /bin/sh -c %s\n", 
 	    file->cf_User,
 	    line->cl_Shell
 	);
@@ -89,7 +81,7 @@
 	/*
 	 * PARENT, FORK FAILED
 	 */
-        log9("couldn't fork, user %s\n", file->cf_User);
+        log_err("couldn't fork, user %s\n", file->cf_User);
         line->cl_Pid = 0;
         remove(mailFile);
     } else {
@@ -158,6 +150,7 @@
     if (mailFd < 0) {
         return;
     }
+
     if (fstat(mailFd, &sbuf) < 0 || 
         sbuf.st_uid != DaemonUid || 
         sbuf.st_nlink != 0 ||
@@ -182,15 +175,6 @@
 	    exit(0);
 
 	/*
-	 * create close-on-exec log descriptor in case exec fails
-	 */
-
-	dup2(2, 8);
-	fcntl(8, F_SETFD, 1);
-
-	fclose(stderr);
-
-	/*
 	 * run sendmail with mail file as standard input, only if
 	 * mail file exists!
 	 */
@@ -200,7 +184,7 @@
 	close(mailFd);
 
 	execl(SENDMAIL, SENDMAIL, SENDMAIL_ARGS, NULL, NULL);
-	logfd(8, "unable to exec %s %s, user %s, output to sink null", 
+	log_err("unable to exec %s %s, user %s, output to sink null", 
 	    SENDMAIL,
 	    SENDMAIL_ARGS,
 	    file->cf_User
@@ -210,7 +194,7 @@
 	/*
 	 * PARENT, FORK FAILED
 	 */
-	log9("unable to fork, user %s", file->cf_User);
+	log_err("unable to fork, user %s", file->cf_User);
 	line->cl_Pid = 0;
     } else {
 	/*
diff -ur dcron-2.3.3.orig/main.c dcron-2.3.3/main.c
--- dcron-2.3.3.orig/main.c	1994-05-02 17:28:24.000000000 +0200
+++ dcron-2.3.3/main.c	2003-05-18 19:14:04.000000000 +0200
@@ -15,14 +15,18 @@
 Prototype short DebugOpt;
 Prototype short LogLevel;
 Prototype short ForegroundOpt;
-Prototype char *CDir;
-Prototype int DaemonUid;
+Prototype short LoggerOpt;
+Prototype char  *CDir;
+Prototype char  *LogFile;
+Prototype uid_t DaemonUid;
 
 short DebugOpt;
 short LogLevel = 8;
-short ForegroundOpt;
+short ForegroundOpt = 0;
+short LoggerOpt;
 char  *CDir = CRONTABS;
-int DaemonUid;
+char  *LogFile = LOG_FILE;
+uid_t DaemonUid;
 
 int
 main(int ac, char **av)
@@ -35,48 +39,49 @@
 
     DaemonUid = getuid();
 
-    for (i = 1; i < ac; ++i) {
-        char *ptr = av[i];
+    opterr = 0;		/* disable getopt 'errors' message.*/
 
-        if (*ptr == '-') {
-	    ptr += 2;
-
-	    switch(ptr[-1]) {
+    while ((i = getopt(ac,av,"d:l:L:fbSc:")) != EOF){
+	
+  	switch (i){
 	    case 'l':
-		LogLevel = (*ptr) ? strtol(ptr, NULL, 0) : 1;
-		continue;
+		LogLevel = atoi(optarg);
+                break;
 	    case 'd':
-		DebugOpt = (*ptr) ? strtol(ptr, NULL, 0) : 1;
+		DebugOpt = atoi(optarg);
 		LogLevel = 0;
 		/* fall through */
+		break;
 	    case 'f':
 		ForegroundOpt = 1;
-		continue;
+		break;
 	    case 'b':
 	        ForegroundOpt = 0;
-	        continue;
+	        break;
+	    case 'S':			/* select logging to syslog */
+		LoggerOpt = 0;
+		break;
+	    case 'L':			/* select internal file logger */
+	        LoggerOpt = 1;
+	        if (*optarg != 0) LogFile = optarg;
+	        break;
 	    case 'c':
-		CDir = (*ptr) ? ptr : av[++i];
-		continue;
+		if (*optarg != 0) CDir = optarg;
+		break;
 	    default:
+                /*
+                 * parse error
+                 */
+	        printf("dcron " VERSION "\n");
+	        printf("dcron -d [#] -l [#] -S -L logfile -f -b -c dir\n");
+	        printf("-d num\tdebug level\n-l num\tlog level (8 - default)\n-S\tlog to syslod (defualt)\n");
+	        printf("-L file\tlog to file\n-f\trun in fordeground\n");
+	        printf("-b\trun in background (default)\n-c dir\tworking dir\n");
+	        exit(1);
 		break;
-	    }
-	}
-	break;	/* error */
-    }
-
-    /*
-     * check for parse error
-     */
-
-    if (i != ac) {
-        if (i > ac)
-            puts("expected argument for option");
-	printf("dcron " VERSION "\n");
-	printf("dcron -d[#] -l[#] -f -b -c dir\n");
-	exit(1);
+        }
     }
-
+    
     /*
      * change directory
      */
@@ -87,14 +92,15 @@
     }
 
     /*
-     * close stdin and stdout (stderr normally redirected by caller).
-     * close unused descriptors
+     * close stdin and stdout, stderr.
+     * close unused descriptors -  don't need.
      * optional detach from controlling terminal
      */
 
     fclose(stdin);
     fclose(stdout);
-
+    fclose(stderr);
+    
     i = open("/dev/null", O_RDWR);
     if (i < 0) {
         perror("open: /dev/null:");
@@ -102,15 +108,14 @@
     }
     dup2(i, 0);
     dup2(i, 1);
-
-    for (i = 3; i < OPEN_MAX; ++i) {
-        close(i);
-    }
+    dup2(i, 2);
 
     if (ForegroundOpt == 0) {
         int fd;
         int pid;
-
+	if (setsid() < 0)
+	    perror("setsid");
+	    
         if ((fd = open("/dev/tty", O_RDWR)) >= 0) {
             ioctl(fd, TIOCNOTTY, 0);
             close(fd);
@@ -125,13 +130,17 @@
         if (pid > 0)
             exit(0);
     }
-
+    
+    (void)startlogger();		/* need if syslog mode selected */
+    (void)initsignals();		/* set some signal handlers */
+    
     /* 
      * main loop - synchronize to 1 second after the minute, minimum sleep
      *             of 1 second.
      */
 
-    log9("%s " VERSION " dillon, started\n", av[0]);
+    log(9,"%s " VERSION " dillon, started, log level %d\n", av[0], LogLevel);
+
     SynchronizeDir(".");
 
     {
diff -ur dcron-2.3.3.orig/subs.c dcron-2.3.3/subs.c
--- dcron-2.3.3.orig/subs.c	1998-02-16 20:35:10.000000000 +0100
+++ dcron-2.3.3/subs.c	2003-05-18 19:14:04.000000000 +0200
@@ -10,12 +10,17 @@
 
 Prototype void log(int level, const char *ctl, ...);
 Prototype void log9(const char *ctl, ...);
-Prototype void logfd(int fd, const char *ctl, ...);
+Prototype void log_err(const char *ctl, ...);
 Prototype void fdprintf(int fd, const char *ctl, ...);
-Prototype int ChangeUser(const char *user, short dochdir);
-Prototype void vlog(int level, int fd, const char *ctl, va_list va);
-Prototype int slog(char *buf, size_t sz, const char *ctl, va_list va, short useDate);
-Prototype char *strdup(const char *);
+Prototype void vlog(int level, int MLOG_LEVEL, const char *ctl, va_list va);
+Prototype int  ChangeUser(const char *user, short dochdir);
+Prototype char *xx_strdup(const char *);
+Prototype void startlogger(void);
+Prototype void initsignals(void);
+
+/*
+	set log_level=9 and log messages
+*/
 
 void 
 log9(const char *ctl, ...)
@@ -23,30 +28,44 @@
     va_list va;
 
     va_start(va, ctl);
-    vlog(9, 2, ctl, va);
+    vlog(9, LOG_WARNING, ctl, va);
     va_end(va);
 }
 
+/*
+	normal logger call point.
+*/
+
 void 
 log(int level, const char *ctl, ...)
 {
     va_list va;
 
     va_start(va, ctl);
-    vlog(level, 2, ctl, va);
+    vlog(level, LOG_NOTICE, ctl, va);
     va_end(va);
 }
 
+/*
+	Original: void 
+		  logfd(int fd, const char *ctl, ...)
+	Updated to: log_error (used by jobs.c)
+*/
+
 void 
-logfd(int fd, const char *ctl, ...)
+log_err(const char *ctl, ...)
 {
     va_list va;
 
     va_start(va, ctl);
-    vlog(9, fd, ctl, va);
+    vlog(20, LOG_ERR, ctl, va);
     va_end(va);
 }
 
+/*
+	used by jobs.c (write to temp file..)
+*/
+
 void 
 fdprintf(int fd, const char *ctl, ...)
 {
@@ -60,32 +79,28 @@
 }
 
 void
-vlog(int level, int fd, const char *ctl, va_list va)
+vlog(int level, int MLOG_LEVEL, const char *ctl, va_list va)
 {
     char buf[1024];
-    short n;
-    static short useDate = 1;
+    int  logfd;
 
     if (level >= LogLevel) {
-        write(fd, buf, n = slog(buf, sizeof(buf), ctl, va, useDate));
-	useDate = (n && buf[n-1] == '\n');
+    	
+	vsnprintf(buf,sizeof(buf), ctl, va);
+	if (DebugOpt) fprintf(stderr,"%s",buf);
+	else 
+	    if (LoggerOpt == 0) syslog(MLOG_LEVEL, "%s",buf );
+            else { 
+                 if ((logfd = open(LogFile,O_WRONLY|O_CREAT|O_APPEND,600)) >= 0){
+                    write(logfd, buf, strlen(buf));
+                    close(logfd);
+                 } else 
+                    fprintf(stderr,"Can't open log file. Err: %s",strerror(errno));
+            } 
     }
 }
 
 int
-slog(char *buf, size_t sz, const char *ctl, va_list va, short useDate)
-{
-    time_t t = time(NULL);
-    struct tm *tp = localtime(&t);
-
-    buf[0] = 0;
-    if (useDate)
-	strftime(buf, 128, "%d-%b-%y %H:%M  ", tp);
-    vsnprintf(buf + strlen(buf), sz - strlen(buf), ctl, va);
-    return(strlen(buf));
-}
-
-int
 ChangeUser(const char *user, short dochdir)
 {
     struct passwd *pas;
@@ -132,7 +147,7 @@
 }
 
 char *
-strdup(const char *str)
+xx_strdup(const char *str)
 {
     char *ptr = malloc(strlen(str) + 1);
 
@@ -141,3 +156,28 @@
     return(ptr);
 }
 
+
+void
+startlogger(void){
+int  logfd;
+
+    if (LoggerOpt == 0)
+	openlog("crond",LOG_CONS|LOG_PID,LOG_CRON);
+
+    else { /* test logfile */
+        if ((logfd = open(LogFile,O_WRONLY|O_CREAT|O_APPEND,600)) >= 0)
+           close(logfd);
+        else
+           printf("Failed to open log file '%s' reason: %s",LogFile,strerror(errno));
+    }
+}
+
+
+void
+initsignals(void){
+
+      signal(SIGHUP,SIG_IGN);	/* hmm.. but, if kill -HUP original 
+                                 * version - his died. ;(
+                                 */
+                                 
+}

--------------010504090408020903070901
Content-Type: text/plain;
 name="dcron-2.9-syslog.patch"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline;
 filename="dcron-2.9-syslog.patch"

diff -ur dcron.orig/crontab.c dcron/crontab.c
--- dcron.orig/crontab.c	2002-12-17 21:04:49.000000000 +0100
+++ dcron/crontab.c	2003-06-26 22:35:27.000000000 +0200
@@ -15,6 +15,9 @@
 char  *CDir = CRONTABS;
 int   UserId;
 short LogLevel = 9;
+short DebugOpt = 0;
+short LoggerOpt = 0;
+char  *LogFile = LOG_FILE;
 
 void EditFile(const char *user, const char *file);
 int GetReplaceStream(const char *user, const char *file);
diff -ur dcron.orig/defs.h dcron/defs.h
--- dcron.orig/defs.h	2002-12-17 21:06:51.000000000 +0100
+++ dcron/defs.h	2003-06-26 22:35:27.000000000 +0200
@@ -17,6 +17,9 @@
 #include <pwd.h>
 #include <unistd.h>
 #include <grp.h>
+#include <syslog.h>
+#include <signal.h>
+#include <getopt.h>
 #include <sys/ioctl.h>
 #include <sys/wait.h>
 #include <sys/stat.h>
@@ -31,6 +34,9 @@
 #ifndef TMPDIR
 #define TMPDIR		"/tmp"
 #endif
+#ifndef LOG_FILE
+#define LOG_FILE	"/var/log/cron"
+#endif
 #ifndef OPEN_MAX
 #define OPEN_MAX	256
 #endif
diff -ur dcron.orig/job.c dcron/job.c
--- dcron.orig/job.c	2002-12-17 21:05:35.000000000 +0100
+++ dcron/job.c	2003-06-26 22:35:27.000000000 +0200
@@ -51,7 +51,7 @@
 	 */
 
 	if (ChangeUser(file->cf_User, 1) < 0) {
-	    log9("ChangeUser failed (%s): %s\n", file->cf_User, line->cl_Shell);
+	    log_err("ChangeUser failed (%s): %s\n", file->cf_User, line->cl_Shell);
 	    exit(0);
 	}
 
@@ -78,7 +78,7 @@
 	    /*
 	     * note: 8 is a descriptor, not a log level
 	     */
-	    logfd(8, "unable to create mail file user %s file %s, output to /dev/null\n",
+	    log_err("unable to create mail file user %s file %s, output to /dev/null\n",
 	        file->cf_User,
 	        mailFile
 	    );
@@ -87,7 +87,7 @@
 	/*
 	 * note: 8 is a descriptor, not a log level
 	 */
-	logfd(8, "unable to exec, user %s cmd /bin/sh -c %s\n", 
+	log_err("unable to exec, user %s cmd /bin/sh -c %s\n", 
 	    file->cf_User,
 	    line->cl_Shell
 	);
@@ -97,7 +97,7 @@
 	/*
 	 * PARENT, FORK FAILED
 	 */
-        log9("couldn't fork, user %s\n", file->cf_User);
+        log_err("couldn't fork, user %s\n", file->cf_User);
         line->cl_Pid = 0;
         remove(mailFile);
     } else {
@@ -187,7 +187,7 @@
 	 */
 
 	if (ChangeUser(file->cf_User, 1) < 0) {
-	    log9("ChangeUser failed (%s), unable to send mail\n", file->cf_User);
+	    log_err("ChangeUser failed (%s), unable to send mail\n", file->cf_User);
 	    exit(0);
 	}
 
@@ -213,7 +213,7 @@
 	/*
 	 * note: 8 is a file descriptor
 	 */
-	logfd(8, "unable to exec %s %s, user %s, output to sink null", 
+	log_err("unable to exec %s %s, user %s, output to sink null", 
 	    SENDMAIL,
 	    SENDMAIL_ARGS,
 	    file->cf_User
@@ -223,7 +223,7 @@
 	/*
 	 * PARENT, FORK FAILED
 	 */
-	log9("unable to fork, user %s", file->cf_User);
+	log_err("unable to fork, user %s", file->cf_User);
 	line->cl_Pid = 0;
     } else {
 	/*
diff -ur dcron.orig/main.c dcron/main.c
--- dcron.orig/main.c	2002-12-17 21:05:44.000000000 +0100
+++ dcron/main.c	2003-06-26 22:35:27.000000000 +0200
@@ -15,14 +15,18 @@
 Prototype short DebugOpt;
 Prototype short LogLevel;
 Prototype short ForegroundOpt;
-Prototype char *CDir;
-Prototype int DaemonUid;
+Prototype short LoggerOpt;
+Prototype char  *CDir;
+Prototype char  *LogFile;
+Prototype uid_t DaemonUid;
 
 short DebugOpt;
 short LogLevel = 8;
-short ForegroundOpt;
+short ForegroundOpt = 0;
+short LoggerOpt;
 char  *CDir = CRONTABS;
-int DaemonUid;
+char  *LogFile = LOG_FILE;
+uid_t DaemonUid;
 
 int
 main(int ac, char **av)
@@ -35,46 +39,46 @@
 
     DaemonUid = getuid();
 
-    for (i = 1; i < ac; ++i) {
-        char *ptr = av[i];
+    opterr = 0;
 
-        if (*ptr == '-') {
-	    ptr += 2;
-
-	    switch(ptr[-1]) {
+    while ((i = getopt(ac,av,"d:l:L:fbSc:")) != EOF) {
+	switch (i) {
 	    case 'l':
-		LogLevel = (*ptr) ? strtol(ptr, NULL, 0) : 1;
-		continue;
+		LogLevel = atoi(optarg);
+		break;
 	    case 'd':
-		DebugOpt = (*ptr) ? strtol(ptr, NULL, 0) : 1;
+		DebugOpt = atoi(optarg);
 		LogLevel = 0;
 		/* fall through */
+		break;
 	    case 'f':
 		ForegroundOpt = 1;
-		continue;
+		break;
 	    case 'b':
 	        ForegroundOpt = 0;
-	        continue;
+	        break;
+	    case 'S':
+		LoggerOpt = 0;
+		break;
+	    case 'L':
+		LoggerOpt = 1;
+		if (*optarg != 0) LogFile = optarg;
+		break;
 	    case 'c':
-		CDir = (*ptr) ? ptr : av[++i];
-		continue;
+		if (*optarg != 0) CDir = optarg;
+		break;
 	    default:
+		/*
+		* check for parse error
+		*/
+		printf("dcron " VERSION "\n");
+		printf("crond -d [#] -l [#] -S -L logfile -f -b -c dir\n");
+		printf("-d num\tdebug level\n-l num\tlog level (8 - default)\n-S\tlog to syslod (default)\n");
+		printf("-L file\tlog to file\n-f\trun in foreground\n");
+		printf("-b\trun in background (default)\n-c dir\tworking dir\n");
+		exit(1);
 		break;
-	    }
 	}
-	break;	/* error */
-    }
-
-    /*
-     * check for parse error
-     */
-
-    if (i != ac) {
-        if (i > ac)
-            puts("expected argument for option");
-	printf("dcron " VERSION "\n");
-	printf("dcron -d[#] -l[#] -f -b -c dir\n");
-	exit(1);
     }
 
     /*
@@ -126,12 +130,15 @@
             exit(0);
     }
 
+    (void)startlogger();
+    (void)initsignals();
+
     /* 
      * main loop - synchronize to 1 second after the minute, minimum sleep
      *             of 1 second.
      */
 
-    log9("%s " VERSION " dillon, started\n", av[0]);
+    log(9,"%s " VERSION " dillon, started, loglevel %d\n", av[0], LogLevel);
     SynchronizeDir(".");
 
     {
diff -ur dcron.orig/subs.c dcron/subs.c
--- dcron.orig/subs.c	1999-02-10 07:31:46.000000000 +0100
+++ dcron/subs.c	2003-06-26 22:41:43.000000000 +0200
@@ -10,11 +10,13 @@
 
 Prototype void log(int level, const char *ctl, ...);
 Prototype void log9(const char *ctl, ...);
-Prototype void logfd(int fd, const char *ctl, ...);
+Prototype void log_err(const char *ctl, ...);
 Prototype void fdprintf(int fd, const char *ctl, ...);
-Prototype int ChangeUser(const char *user, short dochdir);
-Prototype void vlog(int level, int fd, const char *ctl, va_list va);
-Prototype int slog(char *buf, const char *ctl, int nmax, va_list va, short useDate);
+Prototype int  ChangeUser(const char *user, short dochdir);
+Prototype void vlog(int level, int MLOG_LEVEL, const char *ctl, va_list va);
+Prototype char *xx_strdup(const char *);
+Prototype void startlogger(void);
+Prototype void initsignals(void);
 
 void 
 log9(const char *ctl, ...)
@@ -22,7 +24,7 @@
     va_list va;
 
     va_start(va, ctl);
-    vlog(9, 2, ctl, va);
+    vlog(9, LOG_WARNING, ctl, va);
     va_end(va);
 }
 
@@ -32,17 +34,17 @@
     va_list va;
 
     va_start(va, ctl);
-    vlog(level, 2, ctl, va);
+    vlog(level, LOG_NOTICE, ctl, va);
     va_end(va);
 }
 
 void 
-logfd(int fd, const char *ctl, ...)
+log_err(const char *ctl, ...)
 {
     va_list va;
 
     va_start(va, ctl);
-    vlog(9, fd, ctl, va);
+    vlog(20, LOG_ERR, ctl, va);
     va_end(va);
 }
 
@@ -59,32 +61,27 @@
 }
 
 void
-vlog(int level, int fd, const char *ctl, va_list va)
+vlog(int level, int MLOG_LEVEL, const char *ctl, va_list va)
 {
     char buf[2048];
-    short n;
-    static short useDate = 1;
+    int  logfd;
 
     if (level >= LogLevel) {
-        write(fd, buf, n = slog(buf, ctl, sizeof(buf), va, useDate));
-	useDate = (n && buf[n-1] == '\n');
+	vsnprintf(buf,sizeof(buf), ctl, va);
+	if (DebugOpt) fprintf(stderr,"%s",buf);
+	else
+	    if (LoggerOpt == 0) syslog(MLOG_LEVEL, "%s", buf);
+	    else {
+		if ((logfd = open(LogFile,O_WRONLY|O_CREAT|O_APPEND,0600)) >= 0){
+		    write(logfd, buf, strlen(buf));
+		    close(logfd);
+		} else
+		    fprintf(stderr,"Can't open log file. Err: %s",strerror(errno));
+	    }
     }
 }
 
 int
-slog(char *buf, const char *ctl, int nmax, va_list va, short useDate)
-{
-    time_t t = time(NULL);
-    struct tm *tp = localtime(&t);
-
-    buf[0] = 0;
-    if (useDate)
-	strftime(buf, 128, "%d-%b-%y %H:%M  ", tp);
-    vsnprintf(buf + strlen(buf), nmax, ctl, va);
-    return(strlen(buf));
-}
-
-int
 ChangeUser(const char *user, short dochdir)
 {
     struct passwd *pas;
@@ -133,7 +130,7 @@
 #if 0
 
 char *
-strdup(const char *str)
+xx_strdup(const char *str)
 {
     char *ptr = malloc(strlen(str) + 1);
 
@@ -143,3 +140,22 @@
 }
 
 #endif
+
+void
+startlogger (void) {
+int logfd;
+
+    if (LoggerOpt == 0)
+	openlog("crond",LOG_CONS|LOG_PID,LOG_CRON);
+    else {
+	if ((logfd = open(LogFile,O_WRONLY|O_CREAT|O_APPEND,0600)) >= 0)
+	    close(logfd);
+	else
+	    printf("Failed to open logfile '%s' reason: %s",LogFile,strerror(errno));
+    }
+}
+
+void
+initsignals (void) {
+    signal(SIGHUP,SIG_IGN);
+}

--------------010504090408020903070901--

